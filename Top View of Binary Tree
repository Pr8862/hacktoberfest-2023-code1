Given below is a binary tree. The task is to print the top view of binary tree. Top view of a binary tree is the set of nodes visible when the tree is viewed from the top. For the given below tree

       1
    /     \
   2       3
  /  \    /   \
4    5  6   7

Top view will be: 4 2 1 3 7
Note: Return nodes from leftmost node to rightmost node. Also if 2 nodes are outside the shadow of the tree and are at same position then consider the extreme ones only(i.e. leftmost and rightmost). 
For ex - 1 2 3 N 4 5 N 6 N 7 N 8 N 9 N N N N N will give 8 2 1 3 as answer. Here 8 and 9 are on the same position but 9 will get shadowed.

Example 1:

Input:
      1
   /    \
  2      3
Output: 2 1 3



class TreeNode:
    def __init__(self, key):
        self.data = key
        self.left = None
        self.right = None

def top_view(root):
    if not root:
        return

    hd_dict = {}  # Dictionary to store nodes at each horizontal distance
    queue = [(root, 0)]  # Queue for level order traversal

    while queue:
        node, hd = queue.pop(0)

        # If the horizontal distance is not in the dictionary, add the node
        if hd not in hd_dict:
            hd_dict[hd] = node.data

        # Queue the left and right child nodes with adjusted horizontal distances
        if node.left:
            queue.append((node.left, hd - 1))
        if node.right:
            queue.append((node.right, hd + 1))

    # Print nodes in order of their horizontal distances
    top_view_nodes = [hd_dict[hd] for hd in sorted(hd_dict)]
    for node in top_view_nodes:
        print(node, end=" ")

# Example usage:
root = TreeNode(1)
root.left = TreeNode(2)
root.right = TreeNode(3)
root.left.left = TreeNode(4)
root.left.right = TreeNode(5)
root.right.left = TreeNode(6)
root.right.right = TreeNode(7)

print("Top view of the binary tree:")
top_view(root)
